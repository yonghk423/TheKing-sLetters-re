require('dotenv').config();
const { sign, verify } = require('jsonwebtoken');

module.exports = {
  generateAccessToken: (data) => {
    const userData = {
      id: data.id,
      name: data.name,
      email: data.email,
      password: data.password,
      mobile: data.mobile,
      gender: data.gender,
      image: data.image,
      createdAt: data.createdAt,
      updatedAt: data.updatedAt
    }

    return sign(userData, process.env.ACCESS_SECRET, {expiresIn: '24h'});
  },
  sendAccessToken: (req, res, userData, accessToken) => {
    // res.cookie("accessToken", accessToken);
    res.status(200).json({ data: { userData: userData, accessToken: accessToken } });
  },
  isAuthorized: async (req, res) => {
    // const token = req.cookies.jwt;
    // const cookie = req.headers.cookie
    try {
      const header = req.headers.authorization;
      const accessToken = header.split(' ')[1];
      try {
        const verified = verify(accessToken, process.env.ACCESS_SECRET);
  
        return verified
      } catch {
        res.status(404).send('사용 권한이 없습니다. 다시 로그인해주세요.')
      }
    } catch {
      res.status(404).send('인증 토큰이 존재하지 않습니다.')
    }

    // const token = req.headers.cookie.split('=')[1].split(';')[0];

    // const accessToken = verify(token, process.env.ACCESS_SECRET);

    // if(!accessToken) {
    //   res.status(400).send('사용 권한이 없습니다. 다시 로그인해주세요.')
    // }
    // const cookie = req.headers.cookie
    try {
      const header = req.headers.authorization;
      const accessToken = header.split(' ')[1];
      try {
        const verified = verify(accessToken, process.env.ADMIN_SECRET);
  
        return verified
      } catch {
        res.status(404).send('사용 권한이 없습니다. 다시 로그인해주세요.')
      }
    } catch {
      res.status(404).send('인증 토큰이 존재하지 않습니다.')
    }
    // const token = req.headers.cookie.split('=')[1].split(';')[0];

    // const accessToken = verify(token, process.env.ADMIN_SECRET);
    // if(!accessToken) {
    //   res.status(400).send('사용 권한이 없습니다. 다시 로그인해주세요.')
    // }

    // return accessToken
  }
};
